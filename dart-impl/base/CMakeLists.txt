project(project_dart_base)

# Library name
set(DASH_DART_BASE_LIBRARY dart-base)

# Source- and header files to be compiled (OBJ):
file(GLOB_RECURSE DASH_DART_BASE_SOURCES "src/*.c" "src/*.h" "src/*.cc")
file(GLOB_RECURSE DASH_DART_BASE_HEADERS "include/*.h")

set(DASH_DART_IF_INCLUDE_DIR ${DASH_DART_IF_INCLUDE_DIR}
    PARENT_SCOPE)
set(ENABLE_DART_LOGGING ${ENABLE_DART_LOGGING}
    PARENT_SCOPE)
set(ENABLE_UNIFIED_MEMORY_MODEL ${ENABLE_UNIFIED_MEMORY_MODEL}
    PARENT_SCOPE)
set(ENABLE_SHARED_WINDOWS ${ENABLE_SHARED_WINDOWS}
    PARENT_SCOPE)
set(ENABLE_DEFAULT_INDEX_TYPE_LONG ${ENABLE_DEFAULT_INDEX_TYPE_LONG}
    PARENT_SCOPE)
set(ENABLE_SCALAPACK ${ENABLE_SCALAPACK}
    PARENT_SCOPE)
set(ENABLE_LIBNUMA ${ENABLE_LIBNUMA}
    PARENT_SCOPE)
set(ENABLE_HWLOC ${ENABLE_HWLOC}
    PARENT_SCOPE)
set(ENABLE_HWLOC_PCI ${ENABLE_HWLOC_PCI}
    PARENT_SCOPE)
set(ENABLE_LIKWID ${ENABLE_LIKWID}
    PARENT_SCOPE)
set(ENABLE_PAPI ${ENABLE_PAPI}
    PARENT_SCOPE)

# Logging compile flags
#
if (ENABLE_DART_LOGGING)
  set (ADDITIONAL_COMPILE_FLAGS
       "${ADDITIONAL_COMPILE_FLAGS} -DDASH_ENABLE_LOGGING")
  set (ADDITIONAL_COMPILE_FLAGS
       "${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_LOGGING")
endif()

if (ENABLE_UNIFIED_MEMORY_MODEL)
  set (ADDITIONAL_COMPILE_FLAGS
       "${ADDITIONAL_COMPILE_FLAGS} -DDART_MPI_ENABLE_UNIFIED_MEMORY_MODEL")
endif()

# Features compile flags
#
if (PAPI_FOUND AND ENABLE_PAPI)
  set (ADDITIONAL_COMPILE_FLAGS
       "${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_PAPI")
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${PAPI_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${PAPI_LIBRARIES})
endif()
if (HWLOC_FOUND AND ENABLE_HWLOC)
  set (ADDITIONAL_COMPILE_FLAGS
       "${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_HWLOC")
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${HWLOC_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${HWLOC_LIBRARIES})
  if (ENABLE_HWLOC_PCI)
    set (ADDITIONAL_COMPILE_FLAGS
         "${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_HWLOC_PCI")
  endif()
endif()
if (LIKWID_FOUND AND ENABLE_LIKWID)
  set (ADDITIONAL_COMPILE_FLAGS
       "${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_LIKWID")
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${LIKWID_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${LIKWID_LIBRARIES})
endif()
if (NUMA_FOUND AND ENABLE_LIBNUMA)
  set (ADDITIONAL_COMPILE_FLAGS
       "${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_NUMA")
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${NUMA_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${NUMA_LIBRARIES})
endif()

if (NOT ENABLE_SHARED_WINDOWS)
  set (ADDITIONAL_COMPILE_FLAGS
       "${ADDITIONAL_COMPILE_FLAGS} -DDART_MPI_DISABLE_SHARED_WINDOWS")
endif()

set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES} rt)


set(DASH_DART_BASE_INCLUDE_DIRS
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  ${CMAKE_CURRENT_SOURCE_DIR}/src
)

include_directories(
  ${DASH_DART_BASE_INCLUDE_DIRS}
  ${DASH_DART_IF_INCLUDE_DIR}
  ${ADDITIONAL_INCLUDES}
)

add_library(
  ${DASH_DART_BASE_LIBRARY} # library name
  ${DASH_DART_BASE_SOURCES} # sources
  ${DASH_DART_BASE_HEADERS} # headers
)

# Link dependencies
target_link_libraries(
  ${DASH_DART_BASE_LIBRARY}
  ${ADDITIONAL_LIBRARIES}
)

# Compile flags
set_target_properties(
  ${DASH_DART_BASE_LIBRARY} PROPERTIES
  COMPILE_FLAGS ${ADDITIONAL_COMPILE_FLAGS}
  C_STANDARD ${DART_C_STD_PREFERED}
  C_STANDARD_REQUIRED ON
  POSITION_INDEPENDENT_CODE TRUE
)

## Installation

DeployLibrary(${DASH_DART_BASE_LIBRARY})

# Install library
install(TARGETS ${DASH_DART_BASE_LIBRARY}
        DESTINATION lib
        EXPORT "${DASH_DART_BASE_LIBRARY}-config")

# Export dependencies
install(EXPORT "${DASH_DART_BASE_LIBRARY}-config"
        DESTINATION share/cmake)

