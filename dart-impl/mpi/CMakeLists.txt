project(project_dash_dart_impl_mpi C)


# Library name
set(DASH_DART_IMPL_MPI_LIBRARY dart-mpi)

set(DASH_DART_BASE_LIBRARY dart-base)

include(${CMAKE_SOURCE_DIR}/CMakeExt/MPI.cmake)

if (MPI_NOTFOUND)
  message(FATAL_ERROR, "No MPI implementation found for dart-mpi")
endif()

# Source- and header files to be compiled (OBJ):
file(GLOB_RECURSE DASH_DART_IMPL_MPI_SOURCES "src/*.c" "src/*.h" "src/*.cc")
file(GLOB_RECURSE DASH_DART_IMPL_MPI_HEADERS "include/*.h")

# Load global build settings
set(DASH_DART_IF_INCLUDE_DIR ${DASH_DART_IF_INCLUDE_DIR}
    PARENT_SCOPE)
set(ENABLE_DART_LOGGING ${ENABLE_DART_LOGGING}
    PARENT_SCOPE)
set(ENABLE_UNIFIED_MEMORY_MODEL ${ENABLE_UNIFIED_MEMORY_MODEL}
    PARENT_SCOPE)
set(ENABLE_SHARED_WINDOWS ${ENABLE_SHARED_WINDOWS}
    PARENT_SCOPE)
set(ENABLE_DEFAULT_INDEX_TYPE_LONG ${ENABLE_DEFAULT_INDEX_TYPE_LONG}
    PARENT_SCOPE)
set(ENABLE_SCALAPACK ${ENABLE_SCALAPACK}
    PARENT_SCOPE)
set(ENABLE_LIBNUMA ${ENABLE_LIBNUMA}
    PARENT_SCOPE)
set(ENABLE_HWLOC ${ENABLE_HWLOC}
    PARENT_SCOPE)
set(ENABLE_LIKWID ${ENABLE_LIKWID}
    PARENT_SCOPE)
set(ENABLE_PAPI ${ENABLE_PAPI}
    PARENT_SCOPE)
set(ENABLE_HDF5 ${ENABLE_HDF5}
    PARENT_SCOPE)

message(STATUS "MPI include path:         " ${MPI_INCLUDE_PATH})
message(STATUS "MPI libraries:")
foreach (MPI_C_LIB ${MPI_C_LIBRARIES})
  message(STATUS "    " ${MPI_C_LIB})
endforeach()
message(STATUS "MPI link flags:")
foreach (MPI_LINK_FLAG ${MPI_LINK_FLAGS})
  message(STATUS "   " ${MPI_LINK_FLAG})
endforeach()

## Configure compile flags

set (ADDITIONAL_COMPILE_FLAGS
     ${ADDITIONAL_COMPILE_FLAGS} -DDART)
set (ADDITIONAL_COMPILE_FLAGS
     ${ADDITIONAL_COMPILE_FLAGS} -DDART_MPI_IMPL_ID=\"${MPI_IMPL_ID}\")

# MPI compile flags
#
if (${MPI_IMPL_IS_MPICH})
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_MPI_IMPL_IS_MPICH)
endif()
if (${MPI_IMPL_IS_INTEL})
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_MPI_IMPL_IS_INTEL)
endif()
if (${MPI_IMPL_IS_MVAPICH})
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_MPI_IMPL_IS_MVAPICH)
endif()
if (${MPI_IMPL_IS_OPENMPI})
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_MPI_IMPL_IS_OPENMPI)
endif()

# Logging compile flags
#
if (ENABLE_DART_LOGGING)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDASH_ENABLE_LOGGING)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_LOGGING)
endif()

if (ENABLE_UNIFIED_MEMORY_MODEL)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_MPI_ENABLE_UNIFIED_MEMORY_MODEL)
endif()

# Features compile flags
#
if (PAPI_FOUND AND ENABLE_PAPI)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_PAPI)
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${PAPI_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${PAPI_LIBRARIES})
endif()
if (HWLOC_FOUND AND ENABLE_HWLOC)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_HWLOC)
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${HWLOC_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${HWLOC_LIBRARIES})
endif()
if (LIKWID_FOUND AND ENABLE_LIKWID)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_LIKWID)
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${LIKWID_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${LIKWID_LIBRARIES})
endif()
if (NUMA_FOUND AND ENABLE_LIBNUMA)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_NUMA)
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${NUMA_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${NUMA_LIBRARIES})
endif()
if (HDF5_FOUND AND ENABLE_HDF5)
  set (ADDITIONAL_COMPILE_FLAGS
    ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_HDF5)
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${HDF5_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${HDF5_LIBRARIES})
endif()
if (NASTYMPI_FOUND AND ENABLE_NASTYMPI)
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${NASTYMPI_LIBRARIES})
endif()

if (NOT ENABLE_SHARED_WINDOWS)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_MPI_DISABLE_SHARED_WINDOWS)
endif()

if(MPI_COMPILE_FLAGS)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
endif()

set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES} rt)

message (STATUS "DART additional compile flags:")
set(ADDITIONAL_COMPILE_FLAGS_STR "")
foreach (ADDITIONAL_FLAG ${ADDITIONAL_COMPILE_FLAGS})
  message (STATUS "    " ${ADDITIONAL_FLAG})
  set(ADDITIONAL_COMPILE_FLAGS_STR
      "${ADDITIONAL_COMPILE_FLAGS_STR} ${ADDITIONAL_FLAG}")
endforeach()
message (STATUS "DART additional libraries:")
foreach (ADDITIONAL_LIB ${ADDITIONAL_LIBRARIES})
  message (STATUS "    " ${ADDITIONAL_LIB})
endforeach()

## Build targets

# Directories containing the implementation of the library (-I):
set(DASH_DART_IMPL_MPI_INCLUDE_DIRS
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  ${CMAKE_CURRENT_SOURCE_DIR}/src
)
# Includes
include_directories(
  ${DASH_DART_IMPL_MPI_INCLUDE_DIRS}
  ${MPI_INCLUDE_PATH}
  ${DASH_DART_IF_INCLUDE_DIR}
  ${DASH_DART_BASE_INCLUDE_DIR}
  ${ADDITIONAL_INCLUDES}
)
# Library compilation sources
add_library(
  ${DASH_DART_IMPL_MPI_LIBRARY} # library name
  ${DASH_DART_IMPL_MPI_SOURCES} # sources
  ${DASH_DART_IMPL_MPI_HEADERS} # headers
)
# Link dependencies
target_link_libraries(
  ${DASH_DART_IMPL_MPI_LIBRARY}
  ${MPI_C_LIBRARIES}
  ${DASH_DART_BASE_LIBRARY}
  ${ADDITIONAL_LIBRARIES}
)

if(MPI_LINK_FLAGS)
  set_target_properties(
    ${DASH_DART_IMPL_MPI_LIBRARY} PROPERTIES
    LINK_FLAGS "${MPI_LINK_FLAGS}")
endif()

# Compile flags
set_target_properties(
  ${DASH_DART_IMPL_MPI_LIBRARY} PROPERTIES
  COMPILE_FLAGS ${ADDITIONAL_COMPILE_FLAGS_STR}
)

## Installation

DeployLibrary(${DASH_DART_IMPL_MPI_LIBRARY})

# Headers
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/dash
        DESTINATION include FILES_MATCHING PATTERN "*.h")
# Generated headers, if any
# install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/dash
#         DESTINATION include FILES_MATCHING PATTERN "*.h")

if(${CMAKE_VERSION} VERSION_GREATER 3.0.0)
	include(CMakePackageConfigHelpers)
	target_include_directories("${DASH_DART_IMPL_MPI_LIBRARY}" INTERFACE
                             $<INSTALL_INTERFACE:include>)

	configure_package_config_file(
      "dart-config.cmake.in"
      "${DASH_DART_IMPL_MPI_LIBRARY}-config.cmake"
      INSTALL_DESTINATION "${CMAKE_INSTALL_PREFIX}/cmake"
      PATH_VARS CMAKE_INSTALL_PREFIX)
endif()

# Library
install(TARGETS ${DASH_DART_IMPL_MPI_LIBRARY}
        DESTINATION lib
        EXPORT "${DASH_DART_IMPL_MPI_LIBRARY}-targets")

if(${CMAKE_VERSION} VERSION_GREATER 3.0.0)
	# exports
	install(EXPORT "${DASH_DART_IMPL_MPI_LIBRARY}-targets"
	        DESTINATION cmake)

  # install custom config
  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${DASH_DART_IMPL_MPI_LIBRARY}-config.cmake"
        DESTINATION cmake)
endif()
