#ifndef STD_EXPERIMENTAL_FUTURE
#define STD_EXPERIMENTAL_FUTURE

#include <experimental/execution>
#include <future>
#include <memory>

namespace std {
namespace experimental {
inline namespace executors_v1 {

template<class R> class promise;

template<class R> class future;

template<class> class packaged_task; // not defined
template<class R, class... Args> class packaged_task<R(Args...)>;

} // inline namespace executors_v1
} // namespace experimental

template<class R, class Alloc>
  struct uses_allocator<std::experimental::executors_v1::promise<R>, Alloc>
    : std::true_type {};

template<class R, class... Args, class Alloc>
  struct uses_allocator<std::experimental::executors_v1::packaged_task<R(Args...)>, Alloc>
    : std::true_type {};

} // namespace std

#include <experimental/bits/future.h>

#endif // STD_EXPERIMENTAL_FUTURE
